#!/usr/bin/env node

/* eslint no-process-env: 0 */
/* eslint no-console: 0 */
/* eslint no-use-before-define: 0 */

const app = require('../server/app')
const socket = require('../server/routes/socket')
const debug = require('debug')('wsw-web:server')
const http = require('http')
const WebSocketServer = require('websocket').server

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const wsServer = new WebSocketServer({
  httpServer: server
})

socket.attachServer(wsServer)

function normalizePort(val) {
  let p = parseInt(val, 10)

  if (isNaN(p)) {
    // named pipe
    return val
  }

  if (p >= 0) {
    // port number
    return p
  }

  return false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges')
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.error(bind + ' is already in use')
    process.exit(1)
    break
  default:
    throw error
  }
}

function onListening() {
  let addr = server.address()
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
